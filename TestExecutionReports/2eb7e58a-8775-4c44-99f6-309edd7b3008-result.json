{"name": "test_signUp[testData0]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: disconnected: received Inspector.detached event\n  (failed to check if window was closed: disconnected: Unable to receive message from renderer)\n  (Session info: chrome=109.0.5414.121)\nStacktrace:\nBacktrace:\n\t(No symbol) [0x00DE6643]\n\t(No symbol) [0x00D7BE21]\n\t(No symbol) [0x00C7DA9D]\n\t(No symbol) [0x00C7061E]\n\t(No symbol) [0x00C6FFB1]\n\t(No symbol) [0x00C6F3BC]\n\t(No symbol) [0x00C6F2D8]\n\t(No symbol) [0x00C6DC68]\n\t(No symbol) [0x00C6E647]\n\t(No symbol) [0x00C87958]\n\t(No symbol) [0x00C80477]\n\t(No symbol) [0x00C7FFAF]\n\t(No symbol) [0x00C80842]\n\t(No symbol) [0x00C80B30]\n\t(No symbol) [0x00CB0FAC]\n\t(No symbol) [0x00CB147B]\n\t(No symbol) [0x00CE8DC2]\n\t(No symbol) [0x00CCFDC4]\n\t(No symbol) [0x00CE6B09]\n\t(No symbol) [0x00CCFB76]\n\t(No symbol) [0x00CA49C1]\n\t(No symbol) [0x00CA5E5D]\n\tGetHandleVerifier [0x0105A142+2497106]\n\tGetHandleVerifier [0x010885D3+2686691]\n\tGetHandleVerifier [0x0108BB9C+2700460]\n\tGetHandleVerifier [0x00E93B10+635936]\n\t(No symbol) [0x00D84A1F]\n\t(No symbol) [0x00D8A418]\n\t(No symbol) [0x00D8A505]\n\t(No symbol) [0x00D9508B]\n\tBaseThreadInitThunk [0x75D700F9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77997BBE+286]\n\tRtlGetAppContainerNamedObjectPath [0x77997B8E+238]", "trace": "self = <TestCases.test_signUpPage.TestValidateSignUp object at 0x000002142FE6FC10>\ntestData = ['Pardeep Kumar', 'test7@test.com', 'Test!123', 'DevOps,Testing', 'Male', 'Himachal Pradesh']\n\n    def test_signUp(self, testData):\n        _log = Log.logger()\n        _log.info(\"Execution of Test case User Sign Up started\")\n        # print(testData)\n        signup = SignUp(self.driver)\n        _log.info(\"SignUp class object created successfully\")\n    \n        signup.clickSignUplink()\n        _log.info(\"SignUp link clicked successfully\")\n    \n>       signup.enterName(testData[0])\n\nTestCases\\test_signUpPage.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\SignUpPage.py:21: in enterName\n    name = CommonMethods.getWebElement(self, 'SignUpPage', 'name')\nUtilities\\CommonMethods.py:19: in getWebElement\n    elem_ = wait.until(\nC:\\Python310\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:86: in until\n    value = method(self._driver)\nC:\\Python310\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:69: in _predicate\n    return driver.find_element(*locator)\nC:\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:830: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nC:\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002142FE6FFD0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"disconnected\",\"message\":\"disconnected: received Inspector.detached event\\...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77997BBE+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77997B8E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: disconnected: received Inspector.detached event\nE         (failed to check if window was closed: disconnected: Unable to receive message from renderer)\nE         (Session info: chrome=109.0.5414.121)\nE       Stacktrace:\nE       Backtrace:\nE       \t(No symbol) [0x00DE6643]\nE       \t(No symbol) [0x00D7BE21]\nE       \t(No symbol) [0x00C7DA9D]\nE       \t(No symbol) [0x00C7061E]\nE       \t(No symbol) [0x00C6FFB1]\nE       \t(No symbol) [0x00C6F3BC]\nE       \t(No symbol) [0x00C6F2D8]\nE       \t(No symbol) [0x00C6DC68]\nE       \t(No symbol) [0x00C6E647]\nE       \t(No symbol) [0x00C87958]\nE       \t(No symbol) [0x00C80477]\nE       \t(No symbol) [0x00C7FFAF]\nE       \t(No symbol) [0x00C80842]\nE       \t(No symbol) [0x00C80B30]\nE       \t(No symbol) [0x00CB0FAC]\nE       \t(No symbol) [0x00CB147B]\nE       \t(No symbol) [0x00CE8DC2]\nE       \t(No symbol) [0x00CCFDC4]\nE       \t(No symbol) [0x00CE6B09]\nE       \t(No symbol) [0x00CCFB76]\nE       \t(No symbol) [0x00CA49C1]\nE       \t(No symbol) [0x00CA5E5D]\nE       \tGetHandleVerifier [0x0105A142+2497106]\nE       \tGetHandleVerifier [0x010885D3+2686691]\nE       \tGetHandleVerifier [0x0108BB9C+2700460]\nE       \tGetHandleVerifier [0x00E93B10+635936]\nE       \t(No symbol) [0x00D84A1F]\nE       \t(No symbol) [0x00D8A418]\nE       \t(No symbol) [0x00D8A505]\nE       \t(No symbol) [0x00D9508B]\nE       \tBaseThreadInitThunk [0x75D700F9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77997BBE+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77997B8E+238]\n\nC:\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: WebDriverException"}, "attachments": [{"name": "log", "source": "7ae43029-f5a9-4cbd-b03c-026552215551-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "testData", "value": "['Pardeep Kumar', 'test7@test.com', 'Test!123', 'DevOps,Testing', 'Male', 'Himachal Pradesh']"}], "start": 1676045684158, "stop": 1676045700195, "uuid": "c43853fb-39f1-4025-93e3-565471e88667", "historyId": "f5e870496dc2758e44527120f66832f5", "testCaseId": "58d9eb94d866eea44b70f959ffe51b45", "fullName": "TestCases.test_signUpPage.TestValidateSignUp#test_signUp", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "tag", "value": "order(1)"}, {"name": "parentSuite", "value": "TestCases"}, {"name": "suite", "value": "test_signUpPage"}, {"name": "subSuite", "value": "TestValidateSignUp"}, {"name": "host", "value": "GGN_PARDEEP_NA_ITDEV"}, {"name": "thread", "value": "10168-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestCases.test_signUpPage"}]}